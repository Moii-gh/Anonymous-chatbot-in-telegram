import random
import logging
from datetime import datetime

from aiogram import Bot, Router, F, types
from aiogram.types import MessageReactionUpdated

import data
from keyboards import get_chat_keyboard, get_main_keyboard
from handlers.common import init_user_profile

router = Router()

@router.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def find_partner(message: types.Message, bot: Bot):
    """–ò—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    init_user_profile(user_id)
    
    if not data.user_profiles[user_id].get("setup_complete", False):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
        
    if user_id in data.user_pairs:
        await message.answer("‚ùó –í—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä.", reply_markup=get_chat_keyboard())
        return

    if user_id in [uid for queue in data.waiting_queue.values() for uid in queue]:
        await message.answer("–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    user_gender = data.user_profiles[user_id]["gender"]
    user_interests = set(data.user_profiles[user_id]["interests"])
    best_match = None
    best_score = -1

    # –ü–æ–∏—Å–∫ –Ω–∞–∏–ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for queue_gender in data.waiting_queue:
        for waiting_user in data.waiting_queue[queue_gender][:]:
            if waiting_user == user_id or waiting_user in data.blocked_pairs.get(user_id, []):
                continue
            
            waiting_interests = set(data.user_profiles[waiting_user]["interests"])
            common_interests = len(user_interests.intersection(waiting_interests))
            
            if common_interests > best_score:
                best_score = common_interests
                best_match = waiting_user

    if best_match:
        partner_gender = data.user_profiles[best_match]["gender"]
        data.waiting_queue[partner_gender].remove(best_match)
        
        data.user_pairs[user_id] = best_match
        data.user_pairs[best_match] = user_id
        
        data.user_stats[user_id]["chats_count"] += 1
        data.user_stats[best_match]["chats_count"] += 1
        
        common = user_interests.intersection(set(data.user_profiles[best_match]["interests"]))
        common_text = f"\nüéØ <b>–û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:</b> {', '.join(common)}" if common else ""
        
        await bot.send_message(best_match, f"‚ú® –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!{common_text}\n\n–ü–æ–∑–¥–æ—Ä–æ–≤–∞–π—Ç–µ—Å—å! üëã", reply_markup=get_chat_keyboard())
        await message.answer(f"‚ú® –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!{common_text}\n\n–ü–æ–∑–¥–æ—Ä–æ–≤–∞–π—Ç–µ—Å—å! üëã", reply_markup=get_chat_keyboard())
    else:
        if user_id not in data.waiting_queue[user_gender]:
            data.waiting_queue[user_gender].append(user_id)
        await message.answer("üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫, –Ω–∞–∂–º–∏—Ç–µ '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç'.")


def clear_user_states(user_id, partner_id):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á–∞—Ç–æ–º, –¥–ª—è –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    for u_id in [user_id, partner_id]:
        if u_id in data.user_pairs: del data.user_pairs[u_id]
        if u_id in data.exchange_requests: del data.exchange_requests[u_id]
        if u_id in data.active_games: del data.active_games[u_id]
        if u_id in data.message_map: del data.message_map[u_id]


@router.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")
async def disconnect_users(message: types.Message, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞."""
    user_id = message.from_user.id

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–º
    for queue in data.waiting_queue.values():
        if user_id in queue:
            queue.remove(user_id)
            await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_keyboard())
            return
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    if user_id in data.user_pairs:
        partner_id = data.user_pairs[user_id]
        await bot.send_message(partner_id, "üíî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=get_main_keyboard())
        clear_user_states(user_id, partner_id)
        await message.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=get_main_keyboard())
    else:
        await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ –∏ –Ω–µ –≤ –ø–æ–∏—Å–∫–µ.", reply_markup=get_main_keyboard())

@router.message(F.text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
async def block_user(message: types.Message, bot: Bot):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç."""
    user_id = message.from_user.id
    if user_id not in data.user_pairs:
        await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.", reply_markup=get_main_keyboard())
        return
        
    partner_id = data.user_pairs[user_id]
    data.blocked_pairs.setdefault(user_id, []).append(partner_id)
    
    await bot.send_message(partner_id, "üíî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —á–∞—Ç.", reply_markup=get_main_keyboard())
    clear_user_states(user_id, partner_id)
    await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=get_main_keyboard())

@router.message(F.text == "üíé –ü–æ–¥–∞—Ä–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É")
async def give_reward(message: types.Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É."""
    user_id = message.from_user.id
    if user_id not in data.user_pairs:
        await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.", reply_markup=get_chat_keyboard())
        return
        
    partner_id = data.user_pairs[user_id]
    rewards = ["üéÅ", "‚≠ê", "üíñ", "üëë", "üèÜ", "üåü", "üíé", "üéâ"]
    reward = random.choice(rewards)
    
    await bot.send_message(partner_id, f"üéâ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º –Ω–∞–≥—Ä–∞–¥—É: {reward}")
    await message.answer(f"üíù –ù–∞–≥—Ä–∞–¥–∞ {reward} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

@router.message_reaction()
async def handle_reaction(reaction: MessageReactionUpdated, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É."""
    user_id = reaction.user.id
    
    if user_id not in data.user_pairs or reaction.chat.id != user_id:
        return
    
    partner_id = data.user_pairs[user_id]
    original_message_id = reaction.message_id
    
    partner_message_id = data.message_map.get(user_id, {}).get(original_message_id)
    
    if partner_message_id:
        try:
            await bot.set_message_reaction(
                chat_id=partner_id,
                message_id=partner_message_id,
                reaction=reaction.new_reaction,
                is_big=False
            )
        except Exception as e:
            logging.error(f"Failed to set reaction for user {partner_id}: {e}")

@router.message(F.content_type.in_({"text", "photo", "animation", "sticker", "voice", "video_note", "document", "video", "audio"}))
async def forward_message(message: types.Message, bot: Bot):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–æ–º—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
    if user_id not in data.user_pairs:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        main_keyboard_commands = ["üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ùì –ü–æ–º–æ—â—å"]
        if message.text not in main_keyboard_commands:
            await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'", reply_markup=get_main_keyboard())
        return

    partner_id = data.user_pairs[user_id]
    data.user_stats[user_id]["messages_sent"] += 1
    data.user_profiles[user_id]["last_active"] = datetime.now()
    sent_message = None

    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        if message.text:
            sent_message = await bot.send_message(partner_id, message.text)
        elif message.photo:
            sent_message = await bot.send_photo(partner_id, message.photo[-1].file_id, caption=message.caption)
        elif message.sticker:
            sent_message = await bot.send_sticker(partner_id, message.sticker.file_id)
        elif message.animation:
            sent_message = await bot.send_animation(partner_id, message.animation.file_id, caption=message.caption)
        elif message.voice:
            sent_message = await bot.send_voice(partner_id, message.voice.file_id, caption=message.caption)
        elif message.video_note:
            sent_message = await bot.send_video_note(partner_id, message.video_note.file_id)
        elif message.document:
            sent_message = await bot.send_document(partner_id, message.document.file_id, caption=message.caption)
        elif message.video:
            sent_message = await bot.send_video(partner_id, message.video.file_id, caption=message.caption)
        elif message.audio:
            sent_message = await bot.send_audio(partner_id, message.audio.file_id, caption=message.caption)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–∞–∫—Ü–∏–π
        if sent_message:
            data.message_map.setdefault(user_id, {})[message.message_id] = sent_message.message_id
            data.message_map.setdefault(partner_id, {})[sent_message.message_id] = message.message_id

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        logging.error(f"Message forward error from {user_id} to {partner_id}: {e}")
