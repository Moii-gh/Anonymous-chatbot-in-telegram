# extras.py

from aiogram import Bot, Router, F, types

import data
from keyboards import get_exchange_keyboard, get_game_keyboard
from handlers.chatting import clear_user_states

router = Router()

# --- –û–±–º–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ ---

@router.message(F.text == "ü§ù –û–±–º–µ–Ω—è—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏")
async def request_exchange(message: types.Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É."""
    user_id = message.from_user.id
    if user_id not in data.user_pairs:
        await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.")
        return

    partner_id = data.user_pairs[user_id]

    if not message.from_user.username:
        await message.answer("–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —é–∑–µ—Ä–Ω–µ–π–º (@username) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.")
        return

    if user_id in data.exchange_requests:
        await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.")
        return

    data.exchange_requests[user_id] = partner_id
    await bot.send_message(
        partner_id,
        "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±–º–µ–Ω—è—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏!",
        reply_markup=get_exchange_keyboard(user_id)
    )
    await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

@router.callback_query(F.data.startswith("exchange_"))
async def handle_exchange_response(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±–º–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏."""
    user_id = callback.from_user.id
    action, requester_id_str = callback.data.split("_")[1:]
    requester_id = int(requester_id_str)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
    if requester_id not in data.exchange_requests or data.exchange_requests.get(requester_id) != user_id:
        await callback.message.edit_text("‚ùå –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    try:
        requester_info = await bot.get_chat(requester_id)
        user_info = await bot.get_chat(user_id)
    except Exception as e:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        return


    if action == "accept":
        if not requester_info.username or not user_info.username:
            await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–±–º–µ–Ω –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            await bot.send_message(requester_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–±–º–µ–Ω –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        else:
            await bot.send_message(requester_id, f"‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è! –í–æ—Ç –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç: @{user_info.username}")
            await callback.message.edit_text(f"‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å! –í–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @{requester_info.username}")
    else:  # decline
        await bot.send_message(requester_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.")
        await callback.message.edit_text("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.")

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    if requester_id in data.exchange_requests:
        del data.exchange_requests[requester_id]
        
    await callback.answer()

# --- –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ ---

@router.message(F.text == "üé≤ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞")
async def start_game(message: types.Message, bot: Bot):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É."""
    user_id = message.from_user.id
    if user_id not in data.user_pairs:
        await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.")
        return

    partner_id = data.user_pairs[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞—Ç–∞ –ª–∏ —É–∂–µ –∏–≥—Ä–∞
    if user_id in data.active_games:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç. –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π —Ö–æ–¥.", reply_markup=get_game_keyboard())
        return

    data.active_games[user_id] = {"partner_id": partner_id, "move": None}
    data.active_games[partner_id] = {"partner_id": user_id, "move": None}

    await message.answer("–í—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –∏–≥—Ä—É! –î–µ–ª–∞–π—Ç–µ —Å–≤–æ–π —Ö–æ–¥:", reply_markup=get_game_keyboard())
    await bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –≤ '–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞'! –î–µ–ª–∞–π—Ç–µ —Ö–æ–¥:", reply_markup=get_game_keyboard())

@router.callback_query(F.data.startswith("game_"))
async def make_move(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞."""
    user_id = callback.from_user.id
    move = callback.data.split("_")[1]
    move_map = {"rock": "üóø", "scissors": "‚úÇÔ∏è", "paper": "üìÑ"}
    move_emoji = move_map.get(move, "")

    if user_id not in data.active_games:
        await callback.message.edit_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await callback.answer()
        return
        
    if data.active_games[user_id]["move"] is not None:
        await callback.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π —Ö–æ–¥. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.", show_alert=True)
        return

    data.active_games[user_id]["move"] = move
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {move_emoji}")

    partner_id = data.active_games[user_id]["partner_id"]
    partner_game_state = data.active_games.get(partner_id)

    if partner_game_state and partner_game_state["move"]:
        # –û–±–∞ –∏–≥—Ä–æ–∫–∞ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        partner_move = partner_game_state["move"]
        result_p1, result_p2 = determine_winner(move, partner_move)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        await bot.send_message(user_id, result_p1)
        await bot.send_message(partner_id, result_p2)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        if user_id in data.active_games:
            del data.active_games[user_id]
        if partner_id in data.active_games:
            del data.active_games[partner_id]
    else:
        # –ñ–¥–µ–º —Ö–æ–¥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–¥–µ–ª–∞–ª —Å–≤–æ–π —Ö–æ–¥. –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!")
        await callback.answer("–í–∞—à —Ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –ñ–¥–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")

def determine_winner(p1_move, p2_move):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞."""
    rules = {
        "rock": "scissors",
        "scissors": "paper",
        "paper": "rock"
    }
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ö–æ–¥–æ–≤
    move_map = {"rock": "üóø", "scissors": "‚úÇÔ∏è", "paper": "üìÑ"}
    p1_emoji = move_map[p1_move]
    p2_emoji = move_map[p2_move]
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    header = f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\n–í–∞—à —Ö–æ–¥: {p1_emoji}\n–•–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {p2_emoji}\n\n"
    header_reversed = f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\n–í–∞—à —Ö–æ–¥: {p2_emoji}\n–•–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {p1_emoji}\n\n"

    if rules[p1_move] == p2_move:
        # –ò–≥—Ä–æ–∫ 1 –ø–æ–±–µ–¥–∏–ª
        result_p1 = header + "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ"
        result_p2 = header_reversed + "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üò•"
    elif rules[p2_move] == p1_move:
        # –ò–≥—Ä–æ–∫ 2 –ø–æ–±–µ–¥–∏–ª
        result_p1 = header + "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üò•"
        result_p2 = header_reversed + "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ"
    else:
        # –ù–∏—á—å—è
        result_p1 = result_p2 = header + "–ù–∏—á—å—è! ü§ù"
        
    return result_p1, result_p2